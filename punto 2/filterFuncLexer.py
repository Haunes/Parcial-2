# Generated from filterFunc.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,80,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,1,2,
        1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,4,6,42,8,6,11,6,
        12,6,43,1,7,4,7,47,8,7,11,7,12,7,48,1,7,1,7,5,7,53,8,7,10,7,12,7,
        56,9,7,1,8,1,8,5,8,60,8,8,10,8,12,8,63,9,8,1,8,1,8,1,9,1,9,5,9,69,
        8,9,10,9,12,9,72,9,9,1,10,4,10,75,8,10,11,10,12,10,76,1,10,1,10,
        0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,5,
        1,0,48,57,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,3,0,9,10,13,13,32,32,85,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,1,0,0,0,3,25,1,0,0,0,
        5,27,1,0,0,0,7,29,1,0,0,0,9,31,1,0,0,0,11,33,1,0,0,0,13,41,1,0,0,
        0,15,46,1,0,0,0,17,57,1,0,0,0,19,66,1,0,0,0,21,74,1,0,0,0,23,24,
        5,40,0,0,24,2,1,0,0,0,25,26,5,44,0,0,26,4,1,0,0,0,27,28,5,41,0,0,
        28,6,1,0,0,0,29,30,5,91,0,0,30,8,1,0,0,0,31,32,5,93,0,0,32,10,1,
        0,0,0,33,34,5,70,0,0,34,35,5,73,0,0,35,36,5,76,0,0,36,37,5,84,0,
        0,37,38,5,69,0,0,38,39,5,82,0,0,39,12,1,0,0,0,40,42,7,0,0,0,41,40,
        1,0,0,0,42,43,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,14,1,0,0,0,
        45,47,7,0,0,0,46,45,1,0,0,0,47,48,1,0,0,0,48,46,1,0,0,0,48,49,1,
        0,0,0,49,50,1,0,0,0,50,54,5,46,0,0,51,53,7,0,0,0,52,51,1,0,0,0,53,
        56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,16,1,0,0,0,56,54,1,0,0,
        0,57,61,5,34,0,0,58,60,8,1,0,0,59,58,1,0,0,0,60,63,1,0,0,0,61,59,
        1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,65,5,34,0,0,
        65,18,1,0,0,0,66,70,7,2,0,0,67,69,7,3,0,0,68,67,1,0,0,0,69,72,1,
        0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,20,1,0,0,0,72,70,1,0,0,0,73,
        75,7,4,0,0,74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,
        0,77,78,1,0,0,0,78,79,6,10,0,0,79,22,1,0,0,0,7,0,43,48,54,61,70,
        76,1,6,0,0
    ]

class filterFuncLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    FILTER = 6
    INT = 7
    FLOAT = 8
    STRING = 9
    ID = 10
    WS = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'['", "']'", "'FILTER'" ]

    symbolicNames = [ "<INVALID>",
            "FILTER", "INT", "FLOAT", "STRING", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "FILTER", "INT", 
                  "FLOAT", "STRING", "ID", "WS" ]

    grammarFileName = "filterFunc.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


